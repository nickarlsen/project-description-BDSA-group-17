@page "/fetchdata"
@inject HttpClient Http

<!-- dotnet add package Radzen.Blazor -->

<PageTitle>Weather commit</PageTitle>

<h1>Github Repository Insight</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>Owner of Repository:<input @bind="repoOwner"/></p>
<p>Name of Repository:<input @bind="repoName"/></p>
<button @onclick="AuthMode">Author Mode</button>
<button @onclick="FreqMode">Frequency Mode</button>
<ul>
    <li><code>Owner</code>: @repoOwner</li>
    <li><code>Name</code>: @repoName</li>
</ul>

@if (commits == null && authorWithCommits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (commits != null) 
    {
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount of commits</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var commit in commits)
            {
                <tr>
                    <td>@commit.CommitDate.ToShortDateString()</td>
                    <td>@commit.CountCommits</td>
                </tr>
            }
        </tbody>
    </table>
    } 
    else if (authorWithCommits != null) 
    {
        @foreach (var authorWithCommit in authorWithCommits)
        {
            <p>@authorWithCommit.Name</p>
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount of commits</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var commit in authorWithCommit.Freqs)
                    {
                        <tr>
                            <td>@commit.CommitDate.ToShortDateString()</td>
                            <td>@commit.CountCommits</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}

@code {

    private string? repoOwner;
    private string? repoName { get; set; }

    private Freq[]? commits;
    private Author[]? authorWithCommits;



    /*protected override async Task OnInitializedAsync()
    {
        commits = await Http.GetFromJsonAsync<Freq[]>("https://localhost:7200/Commit/Freq?repo=nickarlsen/assignment-05-group-12");
        Console.WriteLine(commits);
    }*/

    public async void FreqMode() {
        authorWithCommits = null;
        commits = await Http.GetFromJsonAsync<Freq[]>($"https://localhost:7200/Commit/Freq?repo={repoOwner}/{repoName}");
        Console.WriteLine(commits);
    }

    public async void AuthMode() {
        commits = null;
        authorWithCommits = await Http.GetFromJsonAsync<Author[]>($"https://localhost:7200/Commit/Auth?repo={repoOwner}/{repoName}");
        Console.WriteLine(commits);
    }
    

    public record Freq(int CountCommits, DateTime CommitDate);
    public record Author(string Name, IEnumerable<Freq> Freqs);
}
