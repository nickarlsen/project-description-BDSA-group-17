@page "/fetchdata"
@inject HttpClient Http

<!-- dotnet add package Radzen.Blazor -->

<PageTitle>Weather commit</PageTitle>

<h1>Github Repository Insight</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>Owner of Repository:<input @bind="repoOwner"/></p>
<p>Name of Repository:<input @bind="repoName"/></p>
<button @onclick="GetCommits">Get Insights</button>
<ul>
    <li><code>Owner</code>: @repoOwner</li>
    <li><code>Name</code>: @repoName</li>
</ul>

@if (commits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Amount of commits</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Hello</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var commit in commits)
            {
                <tr>
                    <td>@commit.CommitDate.ToShortDateString()</td>
                    <td>@commit.CountCommits</td>
                    <td>Hello</td>
                    <td>Hell</td>
                    <td>World</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private string? repoOwner;
    private string? repoName { get; set; }

    private Freq[]? commits;



    /*protected override async Task OnInitializedAsync()
    {
        commits = await Http.GetFromJsonAsync<Freq[]>("https://localhost:7200/Commit/Freq?repo=nickarlsen/assignment-05-group-12");
        Console.WriteLine(commits);
    }*/

    public async void GetCommits() {
        commits = await Http.GetFromJsonAsync<Freq[]>($"https://localhost:7200/Commit/Freq?repo={repoOwner}/{repoName}");
        Console.WriteLine(commits);
    }

    public record Freq(int CountCommits, DateTime CommitDate);
    public record Author(string Name, IEnumerable<Freq> Freqs);
}
